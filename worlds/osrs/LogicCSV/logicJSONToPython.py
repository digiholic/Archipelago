import json
import os

from typing import Dict,List,Any

this_dir = os.path.dirname(os.path.abspath(__file__))

chunks:Dict[str, Any] = {}
resources:List[str] = []

def str_format(s) -> str:
    ret_str = s.replace("'", "\\'")
    return f"'{ret_str}', "


def str_list_to_py(str_list) -> str:
    ret_str = "["
    for s in str_list:
        ret_str += f"\"{s}\", "
    ret_str += "]"
    return ret_str

def chunk_init(chunk_name,chunk_id,chunk):
    chunk["Chunk_Name"] = chunk_name
    chunk["Contents"] = []
    if "Object" in chunk:
        for object in chunk["Object"].keys():
            if not object in resources:
                resources.append(object)
            chunk["Contents"].append(object)
    if "Monster" in chunk:
        for monster in chunk["Monster"].keys():
            if not monster in resources:
                resources.append(monster)
            chunk["Contents"].append(monster)
    chunks[chunk_id]=chunk

with open(os.path.join(this_dir, "chunkpicker-chunkinfo-export.json"), 'r') as localJSON:
    exportedJSON = json.load(localJSON)
    for chunk_id,chunk in exportedJSON["chunks"].items():
        chunk_name = ""
        if "Nickname" in chunk:
            chunk_name = chunk["Nickname"]
        elif "Name" in chunk:
            chunk_name = chunk["Name"]
        if "Sections" in chunk:
            if len(chunk) > 2: #should be nickname and sections
                chunk_init(chunk_name,chunk_id,chunk)#but there might be something else
            for section_id, section in chunk["Sections"].items():
                chunk_init(chunk_name,chunk_id+"-"+section_id,section)
        else:
            chunk_init(chunk_name,chunk_id,chunk)
    for chunk_id,sections in exportedJSON["sections"].items():
        for section_id,connections in sections.items():
            section_name = f"{chunk_id}-{section_id}"
            if section_id == "0":
                section_name = chunk_id
            if section_name not in chunks:
                print("PANIC! : "+ section_name)
                continue
            for connection in connections:
                if connection not in chunks:
                    if f"{connection}-1" in chunks:
                        connection += "-1"
                    else:
                        print("PANIC! : " + connection)
                        continue
                if "Connect" not in chunks[section_name]:
                    chunks[section_name]["Connect"] = {}
                chunks[section_name]["Connect"][connection] = True
                   
                    

with open(os.path.join(this_dir, "regions_generated2.py"), "w+") as regPyFile:
            regPyFile.write('"""\nThis file was auto generated by LogicCSVToPython.py\n"""\n')
            regPyFile.write("from ..Regions import RegionRow\n")
            regPyFile.write("\n")
            regPyFile.write("region_rows = [\n")

            for chunk_id, chunk in chunks.items():
                row_line = "RegionRow("
                row_line += str_format(chunk_id)
                row_line += str_format(chunk["Chunk_Name"])
                if "Connect" in chunk:
                    row_line += f"{str_list_to_py(chunk['Connect'].keys())}, "
                else:
                    row_line += "[], "
                if "Contents" in chunk:
                    row_line += f"{str_list_to_py(chunk['Contents'])})"    
                else:
                    row_line += "[])"
                regPyFile.write(f"\t{row_line},\n")

            
            regPyFile.write("]\n")

with open(os.path.join(this_dir, "resources_generated2.py"),"w+") as resPyFile:
            resPyFile.write('"""\nThis file was auto generated by LogicCSVToPython.py\n"""\n')
            resPyFile.write("from ..Regions import ResourceRow\n")
            resPyFile.write("\n")
            resPyFile.write("resource_rows = [\n")
            for row in resources:
                row_line = f'ResourceRow("{row}")'
                resPyFile.write(f"\t{row_line},\n")
            resPyFile.write("]\n")
